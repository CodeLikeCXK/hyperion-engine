<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="hyperion::utilities::ValueStorage&lt;*,*,*,*&gt;">
    <DisplayString>{($T1 *)dataBuffer}</DisplayString>
    <Expand>
      <Item Name="[Count]">($T2)</Item>

      <ArrayItems>
        <Size>($T2)</Size>
        <ValuePointer>(($T1 *)dataBuffer)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>


  <Type Name="hyperion::containers::Array&lt;*,*&gt;">
    <DisplayString>{{ Size={m_size - m_startOffset} Dynamic={m_allocation.isDynamic} }}</DisplayString>

    <Expand>
      <Item Name="[Size]">(m_size - m_startOffset)</Item>
      <!--<Item Name="[Capacity]" Condition="m_allocation.allocationType == 1">m_allocation.capacity</Item>-->
      <!--<Item Name="[Capacity]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false">m_allocation.capacity</Item>-->
      <!--<Item Name="[Capacity]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == true">m_allocation.dynamicAllocation.capacity</Item>-->
      <Item Name="[Dynamic]">(m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic)</Item>
      <Item Name="[StartOffset]">(m_startOffset)</Item>


      <CustomListItems>
        <Variable Name="idx" InitialValue="0" />
        
        <Loop>
          <Break Condition="idx == (m_size - m_startOffset)" />
          
          <If Condition="m_allocation.allocationType == 1">
            <Item Name="[{ idx }]">*((($T1 *)m_allocation.buffer) + m_startOffset + idx)</Item>
          </If>
          
          <If Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false">
            <Item Name="[{ idx }]">*((($T1 *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset + idx)</Item>
          </If>
          
          <If Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == true">
            <Item Name="[{ idx }]">*((($T1 *)m_allocation.dynamicAllocation.buffer) + m_startOffset + idx)</Item>
          </If>
        
          <Exec>idx++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>


  <Type Name="hyperion::containers::SparsePagedArray&lt;*,*&gt;">
    <Expand>
      <CustomListItems>
        <!-- TODO: Loop through items and accumulate 1s in bitsets to get number of pages and nubmer of elements initialized -->
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="hyperion::containers::Bitset">
    <Expand>
      <CustomListItems>
        <Variable Name="idx" InitialValue="0" />

        <Loop>
          <Break Condition="idx == (m_blocks.m_size - m_blocks.m_startOffset) * numBitsPerBlock" />

          <If Condition="m_blocks.m_allocation.allocationType == 1">
            <Item Name="[{ idx }]">((*(((unsigned __int32 *)m_blocks.m_allocation.buffer) + m_blocks.m_startOffset + idx / numBitsPerBlock)) &gt;&gt; (idx % numBitsPerBlock)) &amp; 1</Item>
          </If>

          <If Condition="m_blocks.m_allocation.allocationType == 2 &amp;&amp; m_blocks.m_allocation.isDynamic == false">
            <Item Name="[{ idx }]">((*(((unsigned __int32 *)&amp;m_blocks.m_allocation.storage.dataBuffer[0]) + m_blocks.m_startOffset + idx / numBitsPerBlock)) &gt;&gt; (idx % numBitsPerBlock)) &amp; 1</Item>
          </If>

          <If Condition="m_blocks.m_allocation.allocationType == 2 &amp;&amp; m_blocks.m_allocation.isDynamic == true">
            <Item Name="[{ idx }]">(* ( (unsigned __int32 *)m_blocks.m_allocation.dynamicAllocation.buffer + m_blocks.m_startOffset + (idx / numBitsPerBlock)) &gt;&gt; (idx % numBitsPerBlock)) &amp; 1</Item>
          </If>

          <Exec>idx++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="hyperion::containers::String&lt;*&gt;">
    <!-- FIXME - new allocators has broken this -->
    <DisplayString Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; $T1 == 2">{{ {((CharType *)m_allocation.buffer + m_startOffset), s8} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; $T1 == 2">{{ {(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), s8} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; $T1 == 1 &amp;&amp; isAnsi">{{ {((CharType *)m_allocation.buffer + m_startOffset), s} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; $T1 == 1 &amp;&amp; isAnsi">{{ {(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), s} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; $T1 == 3 &amp;&amp; isUtf16">{{ {((CharType *)m_allocation.buffer + m_startOffset), su} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; $T1 == 3 &amp;&amp; isUtf16">{{ {(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), su} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; $T1 == 4 &amp;&amp; isUtf32">{{ {((CharType *)m_allocation.buffer + m_startOffset), s32} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; $T1 == 4 &amp;&amp; isUtf32">{{ {(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), s32} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; $T1 == 5 &amp;&amp; isWide">{{ {((CharType *)m_allocation.buffer + m_startOffset), su} }}</DisplayString>
    <DisplayString Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; $T1 == 5 &amp;&amp; isWide">{{ {(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), su} }}</DisplayString>

    <Expand>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; is_utf8">((CharType *)m_allocation.buffer + m_startOffset + m_startOffset), s8</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; is_utf8">(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), s8</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; isAnsi">((CharType *)m_allocation.buffer + m_startOffset + m_startOffset), s</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; isAnsi">(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), s</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; isUtf16">((CharType *)m_allocation.buffer + m_startOffset + m_startOffset), su</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; isUtf16">(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), su</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; isUtf32">((CharType *)m_allocation.buffer + m_startOffset + m_startOffset), s32</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; isUtf32">(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), s32</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 1 || m_allocation.isDynamic == true &amp;&amp; isWide">((CharType *)m_allocation.buffer + m_startOffset + m_startOffset), su</Item>
      <Item Name="[Text]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false &amp;&amp; isWide">(((CharType *)&amp;m_allocation.storage.dataBuffer[0]) + m_startOffset), su</Item>

      <Item Name="[Type]">string_type</Item>

      <Item Name="[Size]">(m_size - m_startOffset - 1)</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocationType == 1">m_allocation.capacity</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == false">m_allocation.capacity</Item>
      <Item Name="[Capacity]" Condition="m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic == true">m_allocation.dynamicAllocation.capacity</Item>
      <Item Name="[Length]">(m_length)</Item>
      <Item Name="[Dynamic]">(m_allocation.allocationType == 2 &amp;&amp; m_allocation.isDynamic)</Item>
      <Item Name="[StartOffset]">(m_startOffset)</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::containers::HashMap&lt;*,*&gt;">
    <DisplayString>{{ Size={m_size} }}</DisplayString>

    <Expand>
      <CustomListItems>
        <Variable Name="bucketPtr" InitialValue="((hyperion::containers::HashSetBucket&lt;$T1,$T2&gt; *)nullptr)" />
        <Variable Name="bucketIndex" InitialValue="0" />

        <Variable Name="currentHead" InitialValue="((hyperion::containers::HashSetElement&lt;$T1,$T2&gt; *)nullptr)" />

        <Exec Condition="m_buckets.m_allocation.allocationType == 1">bucketPtr = ((hyperion::containers::HashSetBucket&lt;$T1,$T2&gt; *) m_buckets.m_allocation.buffer)</Exec>
        <Exec Condition="m_buckets.m_allocation.allocationType == 2 &amp;&amp; m_buckets.m_allocation.isDynamic == false">bucketPtr = ((hyperion::containers::HashSetBucket&lt;$T1,$T2&gt; *) &amp;(m_buckets.m_allocation.storage.dataBuffer[0]))</Exec>
        <Exec Condition="m_buckets.m_allocation.allocationType == 2 &amp;&amp; m_buckets.m_allocation.isDynamic == true">bucketPtr = ((hyperion::containers::HashSetBucket&lt;$T1,$T2&gt; *) m_buckets.m_allocation.dynamicAllocation.buffer)</Exec>

        <Exec Condition="m_buckets.m_allocation.allocationType == 1">bucketPtr = ((hyperion::containers::HashSetBucket&lt;$T1,$T2&gt; *)m_buckets.m_allocation.buffer + m_buckets.m_startOffset)</Exec>
        <Exec Condition="m_buckets.m_allocation.allocationType == 2 &amp;&amp; m_buckets.m_allocation.isDynamic == false">bucketPtr = ((hyperion::containers::HashSetBucket&lt;$T1,$T2&gt; *)&amp;m_buckets.m_allocation.storage.dataBuffer[0] + m_buckets.m_startOffset)</Exec>
        <Exec Condition="m_buckets.m_allocation.allocationType == 2 &amp;&amp; m_buckets.m_allocation.isDynamic == true">bucketPtr = ((hyperion::containers::HashSetBucket&lt;$T1,$T2&gt; *)m_buckets.m_allocation.dynamicAllocation.buffer + m_buckets.m_startOffset)</Exec>

        <Loop>
          <Break Condition="bucketIndex == (m_buckets.m_size - m_buckets.m_startOffset)" />

          <Exec>currentHead = bucketPtr-&gt;head</Exec>

          <If Condition="currentHead != nullptr">
            <Loop>
              <Break Condition="currentHead == nullptr" />
              <Item Name="{ currentHead-&gt;pair.first }">currentHead-&gt;pair.second</Item>
              <Exec>currentHead = currentHead-&gt;next</Exec>
            </Loop>
          </If>
          <Exec>bucketPtr++</Exec>
          <Exec>bucketIndex++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="hyperion::utilities::Span&lt;*&gt;">
    <DisplayString>{{ Address={((void*)first)} Size={(last - first)} }}</DisplayString>
    <Expand>
      <Item Name="[Size]">(last - first)</Item>

      <ArrayItems>
        <Size>(last - first)</Size>
        <ValuePointer>(first)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="hyperion::memory::UniquePtr&lt;*&gt;">
    <DisplayString>{{ {($T1 *)m_holder.value} }}</DisplayString>
    <Expand>
      <ExpandedItem>($T1 *)m_holder.value</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="hyperion::memory::RefCountedPtr&lt;*,*&gt;">
    <DisplayString>{{ {($T1 *)m_ptr} }}</DisplayString>
    <Expand>
      <Item Name="[Strong Count]">(m_ref.m_ptr-&gt;strongCount)</Item>
      <Item Name="[Weak Count]">(m_ref.m_ptr-&gt;weakCount)</Item>
      <ExpandedItem>($T1 *)m_ptr</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="hyperion::memory::WeakRefCountedPtr&lt;*,*&gt;">
    <DisplayString>{{ {($T1 *)m_ptr} }}</DisplayString>
    <Expand>
      <Item Name="[Alive]">(m_ref.m_ptr-&gt;strongCount.m_value._Storage._Value != 0)</Item>
      <Item Name="[Strong Count]">(m_ref.m_ptr-&gt;strongCount)</Item>
      <Item Name="[Weak Count]">(m_ref.m_ptr-&gt;weakCount)</Item>
      <ExpandedItem>($T1 *)m_ptr</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="hyperion::memory::Pimpl&lt;*&gt;">
    <DisplayString>{{ {($T1 *)(&amp;((Allocation *)m_allocation)-&gt;storage)} }}</DisplayString>
    <Expand>
      <ExpandedItem>($T1 *)(&amp;((Allocation *)m_allocation)-&gt;storage)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="hyperion::utilities::detail::VariantBase&lt;*,*&gt;">
    <DisplayString>{{ Index={m_current_index} }}</DisplayString>
    <Expand>
      <Item Name="[Data]">m_storage.dataBuffer</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::threading::ThreadId">
    <DisplayString>{m_name}</DisplayString>
    <Expand>
      <Item Name="[Name]">m_name</Item>
      <Item Name="[ID]">m_value &amp; g_threadIdMask</Item>
      <Item Name="[Category]">(hyperion::threading::ThreadCategory)(m_value &amp; g_threadCategoryMask)</Item>
      <Item Name="[IsDynamic]">(bool)(m_value &amp; g_threadDynamicMask)</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::threading::AtomicVar&lt;*&gt;">
    <DisplayString>{{ Value={m_value} }}</DisplayString>
    <Expand>
      <Item Name="[Value]">m_value</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::threading::Semaphore&lt;*,hyperion::threading::detail::ConditionVarSemaphoreImpl&lt;*&gt;&gt;">
    <DisplayString Condition="m_impl.value&lt;=0">Signaled</DisplayString>
    <DisplayString Condition="m_impl.value&gt;0">Not Signaled</DisplayString>
    <Expand>
      <Item Name="[Value]">m_impl.value</Item>
    </Expand>
  </Type>

  <Type Name="hyperion::ObjId&lt;*&gt;">
    <DisplayString>{{ Value={value} }}</DisplayString>
    <DisplayString>{{ TypeId={typeIdValue} }}</DisplayString>
  </Type>

  <Type Name="hyperion::Handle&lt;*&gt;">
    <Expand>
      <CustomListItems Condition="ptr != nullptr">
        <Variable Name="pool" InitialValue="&amp;(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool)" />
        <Variable Name="blockIndex" InitialValue="0" />
        <Variable Name="currentHead" InitialValue="(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool).m_blocks.m_head" />

        <Loop>
          <Break Condition="currentHead == nullptr || blockIndex &gt; (ptr-&gt;index / pool-&gt;numElementsPerBlock)" />

          <If Condition="currentHead != nullptr &amp;&amp; blockIndex == (ptr-&gt;index / pool-&gt;numElementsPerBlock)">
            <Item Name="[Value]">($T1 *)(&amp;((hyperion::memory::MemoryPoolBlock&lt;hyperion::HypObjectMemory&lt;$T1&gt;,hyperion::memory::MemoryPoolInitInfo,&amp;hyperion::ObjectContainer_OnBlockAllocated&lt;$T1&gt; &gt; *)&amp;currentHead-&gt;value.dataBuffer[0])-&gt;elements.m_values[ptr-&gt;index % pool-&gt;numElementsPerBlock].bytes[0])</Item>
          </If>
          
          <Exec>currentHead = currentHead-&gt;next</Exec>
          
          <Exec>blockIndex++</Exec>
        </Loop>
      </CustomListItems>

    </Expand>
  </Type>

  <Type Name="hyperion::WeakHandle&lt;*&gt;">
    <Expand>
      <CustomListItems>
        <Variable Name="pool" InitialValue="&amp;(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool)" />
        <Variable Name="blockIndex" InitialValue="0" />
        <Variable Name="currentHead" InitialValue="(((hyperion::ObjectContainer&lt;$T1&gt; *)ptr-&gt;container)-&gt;m_pool).m_blocks.m_head" />

        <Loop>
          <Break Condition="currentHead == nullptr || blockIndex &gt; (ptr-&gt;index / pool-&gt;numElementsPerBlock)" />

          <If Condition="currentHead != nullptr &amp;&amp; blockIndex == (ptr-&gt;index / pool-&gt;numElementsPerBlock)">
            <Item Name="[Value]">($T1 *)(&amp;((hyperion::memory::MemoryPoolBlock&lt;hyperion::HypObjectMemory&lt;$T1&gt;,hyperion::memory::MemoryPoolInitInfo,&amp;hyperion::ObjectContainer_OnBlockAllocated&lt;$T1&gt; &gt; *)&amp;currentHead-&gt;value.dataBuffer[0])-&gt;elements.m_values[ptr-&gt;index % pool-&gt;numElementsPerBlock].bytes[0])</Item>
          </If>

          <Exec>currentHead = currentHead-&gt;next</Exec>

          <Exec>blockIndex++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <!-- Walks the whole hash map to display the name as a string! -->
  <Type Name="hyperion::Name">
    <Expand>
      <CustomListItems>
        <Variable Name="bucketPtr" InitialValue="((hyperion::containers::HashSetBucket&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *)nullptr)" />
        <Variable Name="bucketIndex" InitialValue="0" />

        <Variable Name="currentHead" InitialValue="((hyperion::containers::HashSetElement&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *)nullptr)" />

        <Variable Name="found" InitialValue="false"/>

        <Variable Name="hc" InitialValue="this-&gt;hashCode"/>

        <Exec Condition="g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.allocationType == 1">bucketPtr = ((hyperion::containers::HashSetBucket&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *) &amp;(g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.buffer))</Exec>
        <Exec Condition="g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.allocationType == 2 &amp;&amp; g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.isDynamic == true">bucketPtr = ((hyperion::containers::HashSetBucket&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *) &amp;(g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.buffer))</Exec>
        <Exec Condition="g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.allocationType == 2 &amp;&amp; g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.isDynamic == false">bucketPtr = ((hyperion::containers::HashSetBucket&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *) &amp;(g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.storage.dataBuffer[0]))</Exec>

        <Exec Condition="g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.allocationType == 1">bucketPtr = ((hyperion::containers::HashSetBucket&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *)g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.buffer + g_nameRegistry-&gt;m_name_map.m_buckets.m_startOffset)</Exec>
        <Exec Condition="g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.allocationType == 2 &amp;&amp; g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.isDynamic == true">bucketPtr = ((hyperion::containers::HashSetBucket&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *)g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.buffer + g_nameRegistry-&gt;m_name_map.m_buckets.m_startOffset)</Exec>
        <Exec Condition="g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.allocationType == 2 &amp;&amp; g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.isDynamic == false">bucketPtr = ((hyperion::containers::HashSetBucket&lt;unsigned __int64,hyperion::containers::String&lt;1&gt; &gt; *)&amp;g_nameRegistry-&gt;m_name_map.m_buckets.m_allocation.storage.dataBuffer[0] + g_nameRegistry-&gt;m_name_map.m_buckets.m_startOffset)</Exec>

        <Loop>
          <Break Condition="found == true || bucketIndex == (g_nameRegistry-&gt;m_name_map.m_buckets.m_size - g_nameRegistry-&gt;m_name_map.m_buckets.m_startOffset)" />

          <Exec>currentHead = bucketPtr-&gt;head</Exec>

          <If Condition="found == false &amp;&amp; currentHead != nullptr">
           <Loop>
              <Break Condition="found == true || currentHead == nullptr" />
              <If Condition="(unsigned __int64)hashCode == (unsigned __int64)currentHead-&gt;pair.first">
                <If Condition="currentHead-&gt;pair.second.m_allocation.allocationType == 2 &amp;&amp; currentHead-&gt;pair.second.m_allocation.isDynamic == false">
                  <Item Name="StringValue">(char*)&amp;(currentHead-&gt;pair.second.m_allocation.storage.dataBuffer + currentHead-&gt;pair.second.m_startOffset)[0],sb</Item>
                </If>
                <If Condition="currentHead-&gt;pair.second.m_allocation.allocationType == 1 || currentHead-&gt;pair.second.m_allocation.isDynamic == true">
                  <Item Name="StringValue">&amp;((char*)currentHead-&gt;pair.second.m_allocation.buffer + currentHead-&gt;pair.second.m_startOffset)[0],sb</Item>
                </If>
                <Exec>found = true</Exec>
              </If>
              <Exec>currentHead = currentHead-&gt;next</Exec>
            </Loop>
          </If>

          <Exec>bucketPtr++</Exec>
          <Exec>bucketIndex++</Exec>
        </Loop>

        <If Condition="found == false">
          <Item Name="StringValue">"???"</Item>
        </If>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="hyperion::renderer::RenderObjectHandle_Strong&lt;*,*&gt;">
    <DisplayString>{{ ID={index} Strong={s_container-&gt;m_data.m_values[index - 1].ref_count_strong.m_value} Weak={s_container-&gt;m_data.m_values[index - 1].ref_count_weak.m_value} }}</DisplayString>

    <Expand>
      <Item Name="[Strong]">(s_container-&gt;m_data.m_values[index - 1].ref_count_strong.m_value)</Item>
      <Item Name="[Weak]">s_container-&gt;m_data.m_values[index - 1].ref_count_weak.m_value</Item>
      <!--<Item Name="[Name]">_container->m_debug_names.m_values[index]</Item>-->

      <ExpandedItem>($T1 *)(&amp;(s_container-&gt;m_data.m_values[index - 1].storage))</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="hyperion::utilities::TypeId">
    <DisplayString Condition="value == 0">Void</DisplayString>
    <DisplayString Condition="value != 0">{{ Value={value} }}</DisplayString>

    <Expand>
      <Item Name="[Value]">value</Item>
      <Item Name="[Flags]">value &amp; 3</Item>
      <Item Name="[DynamicType]">bool((value &amp; 3) &amp; 1)</Item>
    </Expand>
  </Type>

</AutoVisualizer>